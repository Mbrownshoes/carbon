install.packages('httr')
install.packages('jsonlite')
install.packages('dplyr')
install.packages('devtools')
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
devtools::install_github("NEONScience/NEON-utilities/neonDataStackR")
library(httr)
library(httr)
library(jsonlite)
library(dplyr, quietly = T)
req <- GET("http://data.neonscience.org/api/v0/products/DP1.10003.001")
req
ntent <- content(req, as='parsed')
req.content
req.content <- content(req, as='parsed')
req.content
req
req.content
req.text <- content(req, as="text")
avail <- fromJSON(req.text, simplifyDataFrame = T, flatten = T)
avail
avail$data$keywords
bird.urls <- unlist(avail$data$siteCodes$availableDataUrls)
bird
bird.urls
brd <- GET(bird.urls[grep("WOOD", bird.urls)])
brd <- GET(bird.urls[grep("WOOD", bird.urls)])
brd
typeof(brd)
brd.urls
brd.files <- fromJSON(content(brd, as="text"))
brd
brd.files
brd.files$data$files
brd.files$data$files
brd.files$data$files
brd.files$data$files
brd.count <- read.delim(brd.files$data$files$url
[intersect(grep("coundata", brd.files$data$files$name),
grep("basic", brd.files$data$files$name))], sep=",")
brd.count <- read.delim(brd.files$data$files$url
[intersect(grep("coundata", brd.files$data$files$name),
grep("basic", brd.files$data$files$name))], sep=",")
brd.files$data$files
brd.count <- read.delim(brd.files$data$files$url
[intersect(grep("coundata", brd.files$data$files$name),
grep("basic", brd.files$data$files$name))], sep=",")
brd.count <- read.delim(brd.files$data$files$url
[intersect(grep("countdata", brd.files$data$files$name),
grep("basic", brd.files$data$files$name))], sep=",")
brd.count <- read.delim(brd.files$data$files$url
[intersect(grep("countdata", brd.files$data$files$name),
grep("basic", brd.files$data$files$name))], sep=",")
brd.point <- read.delim(brd.files$data$files$url
[intersect(grep("perpoint", brd.files$data$files$name),
grep("basic", brd.files$data$files$name))], sep=",")
brd.point
View(brd.count)
clusterBySp <- brd.count %>% group_by(scientificName) %>%
summarize(total=sum(clusterSize))
clusterBySp
clusterBySp <- clusterBySp[order(clusterBySp$total, decreasing = T),]
clusterBySp
barplot(clusterBySp$total, names.arg=clusterBySp$scientificName,
ylab='Total',cex.names=0.5, las=2)
conn <- url("https://api.github.com/repos/hadley/dplyr/commits")
conn
content <- readLines(conn, warn = FALSE)
close(conn)
content
content[0]
content[1]
data <- jsonlite::fromJSON(content, simplifyDataFrame = FALSE)
data
data[1]
data[[1]]
library(netcdf)
install.packages("ncdf4")
require(ncdf4)
getwd()
workdir <-'//Users//mathewbrown//projects//Rstuff//carbonFlux'
setwd(workdir)
getwd()
cname ='CT2016.flux1x1-monthly.nc
''
''
ncin <- open.ncdf(cname)
ncin <- nc_open(cname)
cname <- 'CT2016.flux1x1-monthly.nc'
ncin <- nc_open(cname)
require(ncdf4)
workdir <-'//Users//mathewbrown//projects//Rstuff//carbonFlux'
setwd(workdir)
cname <- 'CT2016.flux1x1-monthly.nc'
ncin <- nc_open(cname)
cname <- 'CT2016.flux1x1-20001.nc'
ncin <- nc_open(cname)
cname <- 'CT2016.flux1x1-200001.nc'
ncin <- nc_open(cname)
cname <- 'CT2016.flux1x1.200001.nc'
ncin <- nc_open(cname)
print(ncin)
library(raster)
install.packages(raster)
install.packages('raster)
''
''
install.packages('raster')
library(raster)
datain <- raster(cname)
getwd()
print(ncin)
datain <- raster(cname)
datain
print(datain)
datain
print(datain)
library(maptools)
install.packages(maptools)
install.packages('maptools')
install.packages('maps')
library(maptools)
install.packages('rasterviz')
install.packages('rastervis')
install.packages('rasterVis')
library(maps)
world.outlines <- map('world',plot=FALSE)
datain
world.outlines.sp <- map2SpatialLines(world.outlines, proj4string = CRS("+proj=longlat"))
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
library(maptools)
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
require(ncdf4)
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
library(rasterVis)
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
plt <- levelplot(tmpin, margin = F, cuts=11, pretty=TRUE, par.settings = mapTheme,
main="test variable -- as raster layer")
plt <- levelplot(datain, margin = F, cuts=11, pretty=TRUE, par.settings = mapTheme,
main="test variable -- as raster layer")
plt + layer(sp.lines(world.outlines.sp, col = "black", lwd = 0.5))
plt <- levelplot(datain, margin = F, cuts=6, pretty=TRUE, par.settings = mapTheme,
main="test variable -- as raster layer")
plt + layer(sp.lines(world.outlines.sp, col = "black", lwd = 0.5))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="test variable -- as raster layer")
plt + layer(sp.lines(world.outlines.sp, col = "black", lwd = 0.5))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
plt + layer(sp.lines(world.outlines.sp, col = "black", lwd = 0.5))
print(ncin)
ncin
cname <- 'CT2016.flux1x1.200101.nc'
ncin <- nc_open(cname)
print(ncin)
datain <- raster(cname)
datain
print(datain)
world.outlines <- map('world',plot=FALSE)
world.outlines.sp <- map2SpatialLines(world.outlines, proj4string = CRS("+proj=longlat"))
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
plt + layer(sp.lines(world.outlines.sp, col = "black", lwd = 0.5))
datain
print(datain)
# convert netcdf to raster http://geog.uoregon.edu/GeogR/topics/netcdf-to-raster.html
require(ncdf4)
library(raster)
library(maptools)
library(maps)
library(rasterVis)
workdir <-'//Users//mathewbrown//projects//Rstuff//carbonFlux'
setwd(workdir)
cname <- 'CT2016.flux1x1.200101.nc'
ncin <- nc_open(cname)
print(ncin)
# use raster to read ncdf
datain <- raster(cname)
datain
print(datain)
world.outlines <- map('world',plot=FALSE)
# world.outlines.sp <- map2SpatialLines(world.outlines, proj4string = CRS("+proj=longlat"))
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
plt + layer(sp.lines(world.outlines.sp, col = "black", lwd = 0.5))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
plt + layer(sp.lines)
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
plt
print(ncin)
180*360
datain
setMinMax(datain)
datain@data
datain@data@max
datain@data@min
datain <- setMinMax(datain)
datain@data@min
datain@data@max
library(rgdal)
round(datain@data@max)
round(datain@data@max,3)
datain@data@max
2.772958e-06
2e-06
2e-02
2e-01
2e-05
2e-04
2e-03
print(ncin)
datain <- raster(cname)
tot = get.var.ncdf(ncin,bio_flux_opt)
tot = ncatt_get((ncin,bio_flux_opt)
# use raster to read ncdf
datain <- raster(cname)
datain <- setMinMax(datain)
print(datain)
world.outlines <- map('world',plot=FALSE)
# world.outlines.sp <- map2SpatialLines(world.outlines, proj4string = CRS("+proj=longlat"))
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
tot = ncatt_get(ncin,bio_flux_opt)
tot = ncatt_get(ncin,longitude)
print(ncin)
tot = ncatt_get(ncin,bio_flux_opt)
tot = ncatt_get(ncin,1)
tot = ncatt_get(ncin,0)
tot = ncatt_get(ncin,0,bio_flux_opt)
,coords.nc = nc_open("coordinates.nc")
coords.nc = nc_open("coordinates.nc")
tot = ncatt_get(ncin,0,'bio_flux_opt')
tot = ncatt_get(ncin,'bio_flux_opt')
print(tot)
tot
datain <- raster(cname)
print(datain)
datain <- raster(cname)
datain <- setMinMax(datain)
print(datain)
print(ncin)
ncin <- nc_open(cname)
print(ncin)
datain <- raster(cname)
print(datain)
datain <- raster(cname)
datain <- setMinMax(datain)
print(datain)
ncin
ncin@extent
raster(cname)
datain
datain <- setMinMax(datain)
print(datain)
datain
datain@extent
crs
crs(datain)
saveRDS(datain,file=paste0("200101",'.rds'))
ls
mapPoints <- as.data.frame(rasterToPoints(datain))
View(mapPoints)
datain@data@values
datain@data@attributes
datain@ncols
print(datain)
datain
datain@data
datain@data[[1]]
datain@data
datain@z
datain
brast <- brick(cname)
brast <- brick(cname)
brast <- brick(cname,lvar=4)
brast
brast <- brick(cname,lvar=2)
brast
brast <- brick(cname,lvar=3)
mapPointsBio <- as.data.frame(rasterToPoints(brast))
datain
brast
dim(brast)
brast <- brick(cname,lvar=4)
dim(brast)
cname
cname$var
ncin$var
ncin$var[1]
ncin$var[1:12]
names(ncin$var)
foo <- function(x){
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
names(ncin$var)
vars=names(ncin$var)
sumLayers <- sapply(vars, foo)
print(ncin)
foo <- function(x){
b <- brick(ncin, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
foo <- function(x){
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
b
foo <- function(x){
b <- brick(cname, lvar = 3, varname = x)
print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
foo <- function(x){
b <- brick(cname, lvar = 3, varname = x)
print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
sumLayers <- sapply(vars, foo)
sumLayers <- sapply(vars, foo)
foo <- function(x){
b <- brick(cname, lvar = 3, varname = x)
print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
foo <- function(x){
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
var
vars
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
vars=names(ncin$var)[1:12]
vars
vars=names(ncin$var)[1:5]
vars
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
brick(cname, lvar = 3, varname = 'decimal_time')
brick(cname, lvar = 3, varname = 'ocn_flux_opt')
vars=names(ncin$var)[2:5]
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
brick(cname, lvar = 3, varname = 'bio_flux_opt')
brick(cname, lvar = 3, varname = 'bio_flux_opt')
vars=names(ncin$var)[2:5]
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
vars
brick(cname, lvar = 3, varname = 'bio_flux_opt')
cname
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
print(ncin)
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
#  print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
brick(cname, lvar = 3, varname = 'bio_flux_opt')
b=brick(cname, lvar = 3, varname = 'bio_flux_opt')
cellStats(b, 'sum')
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
#  print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
b
trying to combine all the variables as they are loaeded in raster()
sumLayers <- sapply(vars, foo)
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
nrows
foo
sumLayers
sumLayers <- sapply(vars, foo)
b
sumLayers <- sapply(vars, foo)
b
cellStats(b, 'sum')
cellStats(b, 'sum')
cellStats(b, 'sum')
datain
mapPointsBio <- as.data.frame(rasterToPoints(datain))
View(mapPointsBio)
datain <- raster(cname)]
datain <- raster(cname)
print(datain)
datain <- raster(cname,varname='ocn_flux_opt')
datain
datain
cname
print(ncin)
bio <- raster(cname,varname='bio_flux_opt')
ocn <- raster(cname,varname='ocn_flux_opt')
fossil <- raster(cname,varname='fossil_flux_imp')
fire <- raster(cname,varname='fire_flux_imp')
a.bio <- raster(cname,varname='bio_flux_opt')
a.ocn <- raster(cname,varname='ocn_flux_opt')
bio <- raster(cname,varname='bio_flux_opt')
ocn <- raster(cname,varname='ocn_flux_opt')
fossil <- raster(cname,varname='fossil_flux_imp')
fire <- raster(cname,varname='fire_flux_imp')
brast <- brick(cname)
vars=names(ncin$var)[2:5]
foo <- function(x){
print(x)
b <- brick(cname, lvar = 3, varname = x)
#  print(b)
NAvalue(b) <- 0
cellStats(b, 'sum')
}
sumLayers <- sapply(vars, foo)
print(ncin)
brast <- brick(cname,lvar=4)
brast
brast <- brick(cname,lvar=2)
brast
mapPointsBio <- as.data.frame(rasterToPoints(bio))
mapPointsBio <- as.data.frame(rasterToPoints(bio))
mapPointsOcn <- as.data.frame(rasterToPoints(ocn))
mapPointsFossil <- as.data.frame(rasterToPoints(fossil))
mapPointsFire <- as.data.frame(rasterToPoints(fire))
total <- merge(mapPointsBio,mapPointsOcn,by=c("x","y"))
total <- merge(mapPointsBio,mapPointsOcn,mapPointsFossil,mapPointsFire,by=c("x","y"))
library(dplyr)
full_join(mapPointsBio,mapPointsOcn)
all=full_join(mapPointsBio,mapPointsOcn)
all=full_join(mapPointsBio,mapPointsOcn,mapPointsFossil)
all=full_join(list(mapPointsBio,mapPointsOcn,mapPointsFossil))
all=full_join(mapPointsBio,mapPointsOcn)
all=full_join(all,mapPointsFossil)
all=full_join(all,mapPointsFire)
df_sum= all %>%
rowwise() %>%
mutate(tot=sum(bio_flux_opt,ocn_flux_opt,fossil_flux_imp))
world.outlines <- map('world',plot=FALSE)
mapTheme <- rasterTheme(region = rev(brewer.pal(10, "RdBu")))
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
plt <- levelplot(datain, margin = F, cuts=30, pretty=TRUE, par.settings = mapTheme,
main="Carbon Flux")
write.csv(df_sum, file=paste0("VIIRS final data layers/mapData-week-",i,".csv"), row.names=F)
write.csv(df_sum, file=paste0("VIIRS final data layers/mapData-week-",1,".csv"), row.names=F)
write.csv(df_sum, file=paste0("carbob_flux",'tst',".csv"), row.names=F)
install.packages("tidyverse")
